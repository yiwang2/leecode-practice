package com.practice.leedcode;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashSet;
import java.util.Set;

/**
 * You are given a network of n nodes represented as an n x n adjacency matrix
 * graph, where the ith node is directly connected to the jth node if
 * graph[i][j] == 1.
 * 
 * Some nodes initial are initially infected by malware. Whenever two nodes are
 * directly connected, and at least one of those two nodes is infected by
 * malware, both nodes will be infected by malware. This spread of malware will
 * continue until no more nodes can be infected in this manner.
 * 
 * Suppose M(initial) is the final number of nodes infected with malware in the
 * entire network after the spread of malware stops.
 * 
 * We will remove exactly one node from initial, completely removing it and any
 * connections from this node to any other node.
 * 
 * Return the node that, if removed, would minimize M(initial). If multiple
 * nodes could be removed to minimize M(initial), return such a node with the
 * smallest index.
 *
 */
public class MiniMalwareSpread2 {

	public static int minMalwareSpread(int[][] graph, int[] initial) {

		int N = graph.length;
		// initially, set everything is 1 and set the initial infected node value as 0
		int[] clean = new int[N];
		Arrays.fill(clean, 1);
		for (int x : initial) {
			//clean is used for dfs, clean is used to avoid search initial nodes themself
			clean[x] = 0;
		}

		ArrayList<Integer>[] infectedBy = new ArrayList[N];
		for (int i = 0; i < N; ++i) {
			infectedBy[i] = new ArrayList<Integer>();
		}

		// for each initial node, dfs to find who will be infected
		for (int infectedNode : initial) {
			Set<Integer> seen = new HashSet<Integer>();
			dfs(graph, clean, infectedNode, seen);
			for (int affectedNode : seen) {
				infectedBy[affectedNode].add(infectedNode);
			}

		}

		// For each node u in initial, for every v not in initial
		// that is uniquely infected by u, add 1 to the contribution for u.
		int[] contribution = new int[N];
		for (int v = 0; v < N; ++v) {
			if (infectedBy[v].size() == 1) {
				//infectedBy[v].get(0) is actually one of the init infected node
				contribution[infectedBy[v].get(0)]++;
			}
		}

		// Take the best answer.
		Arrays.sort(initial);
		int ans = initial[0], ansSize = -1;
		for (int u : initial) {
			int score = contribution[u];
			//min node index and max score
			if (score > ansSize || score == ansSize && u < ans) {
				ans = u;
				ansSize = score;
			}
		}
		return ans;

	}

	// do a dfs searching
	public static void dfs(int[][] graph, int[] clean, int initInfectedNode, Set<Integer> seen) {
		// due to n*n, v is the next node of the initInfectedNode
		for (int v = 0; v < graph.length; ++v)
			if (graph[initInfectedNode][v] == 1 && clean[v] == 1 && !seen.contains(v)) {
				seen.add(v);
				dfs(graph, clean, v, seen);
			}
	}
}
